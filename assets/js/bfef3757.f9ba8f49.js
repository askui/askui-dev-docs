"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82056],{84844:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=n(17624),o=n(4552);const a={displayed_sidebar:"apiSidebar"},r="typeIntoTextfield",l={id:"api/Convenience/typeintotextfield",title:"typeIntoTextfield",description:"production",source:"@site/docs/api/08-Convenience/typeintotextfield.md",sourceDirName:"api/08-Convenience",slug:"/api/Convenience/typeintotextfield",permalink:"/docs/next/api/Convenience/typeintotextfield",draft:!1,unlisted:!1,editUrl:"https://github.com/askui/askui/tree/main/docs/docs/api/08-Convenience/typeintotextfield.md",tags:[],version:"current",frontMatter:{displayed_sidebar:"apiSidebar"},sidebar:"apiSidebar",previous:{title:"pressKeys",permalink:"/docs/next/api/Convenience/pressKeys"},next:{title:"waitUntil",permalink:"/docs/next/api/Convenience/waituntil"}},s={},d=[];function p(e){const t={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"typeintotextfield",children:"typeIntoTextfield"}),"\n",(0,i.jsx)("span",{class:"theme-doc-version-badge badge badge--secondary",children:"production"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(t.p,{children:"Types a given text into a textfield.\nUse a relation to specify how to find the textfield in relation to a specific label."}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:"Examples:"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"// Finds the textfield nearest to the label 'Email'\nawait aui.typeIntoTextfield({textToWrite: 'Hello World', relation: {label: 'Email'}});\n\n// Finds the textfield above/below a label 'Password'\nawait aui.typeIntoTextfield(\n  {textToWrite: 'Hello World', relation: {type: 'above', label: 'Password'}}\n);\nawait aui.typeIntoTextfield(\n  {textToWrite: 'Hello World', relation: {type: 'below', label: 'Password'}}\n);\n\n// If there is no label but a placeholder, the label is contained in the textfield\nawait aui.typeIntoTextfield(\n  {textToWrite: 'Hello World', relation: {type: 'contains', label: 'Enter email'}}\n);\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["@param {Object} params - Object containing required ",(0,i.jsx)(t.code,{children:"textToWrite"})," property and optional ",(0,i.jsx)(t.code,{children:"relation"})," property."]}),"\n",(0,i.jsx)(t.li,{children:"@property {string} params.textToWrite - The text to be typed into the textfield."}),"\n",(0,i.jsx)(t.li,{children:"@property {Object} params.relation - Object describing the relationship between the textfield being interacted with and another element."}),"\n",(0,i.jsx)(t.li,{children:"@property {RelationsForConvenienceMethods} params.relation.type - The type of relation, optional."}),"\n",(0,i.jsx)(t.li,{children:"@property {string} params.relation.label - The label associated with the related element, optional."}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>l,M:()=>r});var i=n(11504);const o={},a=i.createContext(o);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);